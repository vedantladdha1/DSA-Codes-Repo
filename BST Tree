#include <stdio.h>
#include<stdlib.h>

struct Node{
    struct Node*lchild;
    int data;
    struct Node*rchild;
}*root=NULL;

void Insert(int key){
    struct Node*p,*r;
    struct Node*t=root;
    if(root==NULL)
    {
    p=(struct Node*)malloc(sizeof(struct Node));
    p->data=key;
    p->lchild=p->rchild=NULL;
    root=p;
    return ;
    }
    
    while(t!=NULL)
    {
      r=t;
      if(key>t->data){
          t=t->rchild;
      }
      else if(key<t->data){
          t=t->lchild;
      }
      else
      return ;
        
        
    }
    
    p=(struct Node*)malloc(sizeof(struct Node));
    p->data=key;
    p->lchild=p->rchild=NULL;
    if(key<r->data)
    r->lchild=p;
    else r->rchild=p;
}

int height(struct Node*p){
    int x=0;
    int y=0;
    if(p==NULL)
    return 0;
    x = height(p->lchild);
    y = height(p->rchild);
    if(x>y){
        return x+1;
    }
    else
    return y+1;
}
void Preorder(struct Node*p){
    if(p)
    {
        printf("%d ",p->data);
        Preorder(p->lchild);
        Preorder(p->rchild);
       
    }
}
void Inorder(struct Node*p){
    if(p)
    {
        Inorder(p->lchild);
        printf("%d",p->data);
        Inorder(p->rchild);
        
    }
}

void Postorder(struct Node*p){
    if(p)
    {
        
        Postorder(p->lchild);
        Postorder(p->rchild);
        printf("%d",p->data);
        
    }
}
struct Node*InSucc(struct Node*p){
    while(p&&p->rchild!=NULL)
        p=p->lchild;
    
    return p;
}
struct Node*search(int key)
{
    struct Node*t;
    while(t!=NULL){
        if(key==t->data)
        return t;
        
        else if(key<t->data){
            t=t->lchild;
        }
        else
            t=t->rchild;
        
        
    }
    return NULL;
}
struct Node*delete(struct Node*p,int key){
   
    if(p==NULL){
        return NULL;
        
    }
    if(p->lchild == NULL && p->rchild == NULL){
        ///leaf nodes///
        if(p==root)
        root =  NULL;
        else
        free(p);
        return NULL;
    }
 
    
    
    if(key<p->data)
    {
            p->lchild=delete(p->lchild,key);
           
            
    }
    else if(key>p->data)
    {
            p->rchild=delete(p->rchild,key);
    }
    else 
        {
             struct  Node*q;
            
                q=InSucc(p->lchild);
                p->data=q->data;
                p->lchild=delete(p->lchild,q->data);
            
           
        }
        return p;
    }

int main() {
    int choice, key;
    struct Node* foundNode;
struct Node*deleteNode;
    do {
        printf("\nBinary Search Tree Operations\n");
        printf("1. Insert\n");
        printf("2. Preorder Traversal\n");
        printf("3. Inorder Traversal\n");
        printf("4. Postorder Traversal\n");
        printf("5. Height\n");
        printf("6. Search\n");
        printf("7. Delete\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter the key to be inserted: ");
            scanf("%d", &key);
            Insert(key);
            break;
        case 2:
            printf("Preorder Traversal: ");
            Preorder(root);
            printf("\n");
            break;
        case 3:
            printf("Inorder Traversal: ");
            Inorder(root);
            printf("\n");
            break;
        case 4:
            printf("Postorder Traversal: ");
            Postorder(root);
            printf("\n");
            break;
        case 5:
            printf("Height of the tree is: %d\n", height(root));
            break;
        case 6:
            printf("Enter the key to be searched: ");
            scanf("%d", &key);
            foundNode = search(key);
            if (foundNode != NULL)
                printf("Key found in the tree.\n");
            else
                printf("Key not found in the tree.\n");
            break;
        case 7:
            printf("Enter the key to be deleted: ");
            scanf("%d", &key);
            root = delete(root, key);
            break;
        case 8:
            printf("Exiting...\n");
            break;
        default:
            printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 8);

    return 0;
}
